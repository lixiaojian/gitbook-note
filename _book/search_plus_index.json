{"./":{"url":"./","title":"Introduction","keywords":"","body":"简介 随便写点东西第一章第一章第一章 "},"1.1.html":{"url":"1.1.html","title":"第一章第一章第一章","keywords":"","body":"1.1的内容Introduction第二章第二章第二章第二章第二章第二章第二章第二章第二章第二章第二章第二章第二章第二章第二章第二章 "},"2.html":{"url":"2.html","title":"第二章第二章第二章第二章第二章第二章第二章第二章第二章第二章第二章第二章第二章第二章第二章第二章","keywords":"","body":"代码 const a = 100; const b = 200; console.log( a+ b); 代码的下一级 随便来眯 文字 这里是文字 文字的下一级 这随便来一点第一章第一章第一章webrtc "},"pages/webrtc/":{"url":"pages/webrtc/","title":"webrtc","keywords":"","body":"webrtc 这里是webrtc的内容第二章第二章第二章第二章第二章第二章第二章第二章第二章第二章第二章第二章第二章第二章第二章第二章webrtc "},"pages/webrtc/instro.html":{"url":"pages/webrtc/instro.html","title":"webrtc","keywords":"","body":"11111webrtcnginx的升级 "},"pages/nginx/":{"url":"pages/nginx/","title":"nginx的升级","keywords":"","body":"Linux之nginx升级记 没有前奏，直接来 首先需要查看自己的nginx 直接要命令行输入如下命令就可以了 nginx -v nginx version: nginx/1.10.0 这里控制台输出的结果中 1.10.0 就是我们当前 nginx 的版本 查看nginx的最新版本 浏览器直接访问 http://nginx.org/en/download.html 就可以看到当前官方的版本，其中 Mainline version 是开发版本，还不太稳定，线上不建议使用；Stable version是最新稳定版，线上建议使用；Legacy versions就是老版本了。 下载nginx安装包 我们可以在这里下载自己想要的版本就可以了，可以直接下载后上传到linux机器上，也可以直接在命令行通过 wget https://nginx.org/download/nginx-1.16.0.tar.gz 直接进行下载（这里自己注意相应的版本号），这里文件目录自行选定，我直接放到了根目录下。 解压nginx安装包 tar -xzf nginx-1.16.0.tar.gz 执行了该命令，就可以将安装包解压出来，当前目录就会多出来一个nginx-1.16.0的目录，然后我们进入该目录。 编译安装nginx 编译nginx时需要依赖一部分库，后面我们会专门针对报错做出说明，这里先默认所有的依赖我们系统里都已经安装。因为我们这里是升级Nginx不是新安装，那些缺的库我们可能都已经安装过了，这里就不需要一上来就一顿猛装库操作。 我们可以先看一下我们之前编译nginx时的参数，这次升级可就可以用相同的参数就行了。在命令行执行 nginx -V 就可以看到类似以下的输出（注意这里是大写的V）, arguments后面就是参数了，可能会很长，复制下来就好了 nginx version: nginx/1.10.0 configure arguments: --prefix=/usr/share/nginx --with-http_sub_module --with-pcre 然后执行 （这里记得先备份一下之前nginx的配置文件就在/etc/nginx 目录） ./configure (上面的参数) && make 然后等着执行完成就行了,执行成功后会在 objs 目录下生成 nginx 文件这里执行成功后再查看当前nginx版本，依然是老的版本，不要急，还要进行下面的操作。 替换之前的nginx执行文件 先查看nginx的位置，在命令行执行以下操作 whereis nginx nginx: /usr/sbin/nginx /etc/nginx /usr/lib64/nginx /usr/share/nginx 就可以看到我们的nginx文件在 /usr/sbin/ 目录下，后面几个目录都是配置相关的目录。我们进入 /usr/sbin/ 目录，将老的nginx重新命名为nginx.old。 mv nginx nginx.old 然后再将我们刚才objs目录下生成的nginx文件复制到/usr/sbin/ 目录下就好了。 cp ./objs/nginx /usr/sbin/ 现在再查看一下nginx的版本 nginx -v nginx version: nginx/1.16.0 现在就可以看到是我们新安装的版本了（这里小写的v就可以了）。 启动nginx 我们进入到 /usr/sbin/ 目录，直接执行 nginx就行了 cd /usr/sbin/ nginx 能正常启动就好了，启动时有可能出现如下错误 nginx: [emerg] module \"/usr/lib64/nginx/modules/ngx_http_geoip_module.so\" version 1010002 instead of 1016000 in /usr/share/nginx/modules/mod-http-geoip.conf:1 这个原因是因为以前nginx modules 和我们新装的modules 不匹配，我们就要先先将旧的modules 卸载安装新版官方的modules，执行如下命令 yum remove nginx-module* yum install nginx-module-* 这里删除掉我们之前的nginx的配置文件，我们将之前备份的nginx文件拷过来就好，也可能发发现有些文件找不到比如： > nginx: [emerg] open() \"/etc/nginx/mime.types\" failed (2: No such file or directory) in /etc/nginx/nginx.conf:31 就是说在/etc/nginx/mime.types文件找不到，如果我们的备份文件里没有，可以去nginx的安装目录/conf/下找找看，找到了复制过来就好了就可以正常启动了。 编译过程中可能出现的缺包 /configure: error: the HTTP rewrite module requires the PCRE library. 解决方法：安装pcre yum install -y pcre pcre-devel ./configure: error: the HTTP cache module requires md5 functions from OpenSSL library. 解决方法：安装openssl yum install -y openssl openssl-devel ./configure: error: C compiler cc is not found 解决方法：安装gcc-c++ yum install -y gcc-c++ autoconf automake ./configure: error: the HTTP gzip module requires the zlib library. 解决方法：安装zlib yum install -y zlib-devel ./configure: error: the HTTP XSLT module requires the libxml2/libxslt libraries. 解决方法：安装libxml2 libxml2-dev libxslt-devel yum -y install libxml2 libxml2-dev libxslt-devel ./configure: error: the HTTP image filter module requires the GD library. 解决方法：安装gd-devel yum -y install gd-devel ./configure: error: perl module ExtUtils::Embed is required 解决方法：安装perl-devel perl-ExtUtils-Embed yum -y install perl-devel perl-ExtUtils-Embed ./configure: error: the GeoIP module requires the GeoIP library. 解决方法：安装GeoIP GeoIP-devel GeoIP-data yum -y install GeoIP GeoIP-devel GeoIP-data 如果还缺少其他的包，直接安装就行了。webrtc "}}